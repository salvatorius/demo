"use strict";(self.webpackChunkcafenet=self.webpackChunkcafenet||[]).push([[178],{1201:(e,n,a)=>{a.d(n,{Zo:()=>u,kt:()=>f});var r=a(6687);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function c(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var l=r.createContext({}),s=function(e){var n=r.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var a=e.components,t=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(a),m=t,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return a?r.createElement(f,i(i({ref:n},u),{},{components:a})):r.createElement(f,i({ref:n},u))}));function f(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=a.length,i=new Array(o);i[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[d]="string"==typeof e?e:t,i[1]=c;for(var s=2;s<o;s++)i[s]=a[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2852:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=a(8792),t=(a(6687),a(1201));const o={},i="Generadores Infinitos",c={unversionedId:"python-generators/generador-infinito",id:"python-generators/generador-infinito",title:"Generadores Infinitos",description:"En este ejemplo, vamos a crear un generador que devuelva una secuencia de Fibonacci. La secuencia de Fibonacci es una secuencia de n\xfameros en la que cada n\xfamero es la suma de los dos n\xfameros anteriores. Por ejemplo, la secuencia comienza con 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...",source:"@site/docs/python-generators/5-generador-infinito.md",sourceDirName:"python-generators",slug:"/python-generators/generador-infinito",permalink:"/demo/docs/python-generators/generador-infinito",draft:!1,editUrl:"https://github.com/salvatorius/demo/tree/main/packages/create-docusaurus/templates/shared/docs/python-generators/5-generador-infinito.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Generadores Finitos",permalink:"/demo/docs/python-generators/generador-finito"}},l={},s=[],u={toc:s},d="wrapper";function p(e){let{components:n,...a}=e;return(0,t.kt)(d,(0,r.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"generadores-infinitos"},"Generadores Infinitos"),(0,t.kt)("p",null,"En este ejemplo, vamos a crear un generador que devuelva una secuencia de Fibonacci. La secuencia de Fibonacci es una secuencia de n\xfameros en la que cada n\xfamero es la suma de los dos n\xfameros anteriores. Por ejemplo, la secuencia comienza con 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ..."),(0,t.kt)("p",null,"Para crear el generador de la secuencia de Fibonacci, vamos a utilizar la instrucci\xf3n yield para devolver cada n\xfamero de forma incremental. En cada iteraci\xf3n, vamos a calcular el siguiente n\xfamero de la secuencia y lo devolveremos con yield."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"def fibonacci():\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\ng = fibonacci()\n\nfor i in range(10):\n    print(next(g))\n")),(0,t.kt)("p",null,"En este ejemplo, la funci\xf3n fibonacci utiliza dos variables a y b para calcular la secuencia de Fibonacci. Comenzamos con ",(0,t.kt)("inlineCode",{parentName:"p"},"a = 0")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"b = 1"),", y en cada iteraci\xf3n, devolvemos el valor de ",(0,t.kt)("inlineCode",{parentName:"p"},"a")," con la instrucci\xf3n yield. A continuaci\xf3n, actualizamos los valores de ",(0,t.kt)("inlineCode",{parentName:"p"},"a")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"b")," para calcular el siguiente n\xfamero de la secuencia, sumando a y b. Este proceso se repite indefinidamente con un bucle ",(0,t.kt)("inlineCode",{parentName:"p"},"while True"),", lo cual nos garantiza que el generador ",(0,t.kt)("strong",{parentName:"p"},"nunca se agota"),"!."),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"Podemos seguir solicitando respuestas a este generador sin otro l\xedmite m\xe1s que el que le impongamos a la rutina que se encargue de iterar por los elementos que \xe9ste provee")),(0,t.kt)("p",null,"Despu\xe9s de definir la funci\xf3n fibonacci, creamos un objeto generador ",(0,t.kt)("inlineCode",{parentName:"p"},"g")," llamando a la funci\xf3n fibonacci. Y esta vez utilizamos directamente un bucle ",(0,t.kt)("inlineCode",{parentName:"p"},"for")," para imprimir los primeros 10 n\xfameros de la secuencia de Fibonacci, pero, s\xf3lo a modo ilustrativo, en este ejemplo utilizamos la funci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"next()")," dentro de un for que itera por \xedndices tomados de ese ",(0,t.kt)("inlineCode",{parentName:"p"},"range")," (en lugar de iterar directamente sobre el generador ",(0,t.kt)("inlineCode",{parentName:"p"},"g"),") para obtener el siguiente valor del objeto generador en cada iteraci\xf3n y, al mismo tiempo, poder mantener el contador de items que hemos obtenido (con la variable auxiliar ",(0,t.kt)("inlineCode",{parentName:"p"},"i"),")"),(0,t.kt)("p",null,"Este ejemplo muestra c\xf3mo la instrucci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"yield")," puede utilizarse para crear generadores que generan secuencias de valores indefinidamente, y c\xf3mo estos generadores pueden utilizarse en bucles for para iterar sobre una secuencia de valores generada de forma incremental."))}p.isMDXComponent=!0}}]);