"use strict";(self.webpackChunkcafenet=self.webpackChunkcafenet||[]).push([[121],{1201:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>g});var r=a(6687);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function t(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?t(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):t(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,r,o=function(e,n){if(null==e)return{};var a,r,o={},t=Object.keys(e);for(r=0;r<t.length;r++)a=t[r],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)a=t[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var a=e.components,o=e.mdxType,t=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(a),m=o,g=p["".concat(s,".").concat(m)]||p[m]||d[m]||t;return a?r.createElement(g,l(l({ref:n},c),{},{components:a})):r.createElement(g,l({ref:n},c))}));function g(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var t=a.length,l=new Array(t);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var u=2;u<t;u++)l[u]=a[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1774:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>i,toc:()=>u});var r=a(8792),o=(a(6687),a(1201));const t={sidebar_position:1},l="Yield y los Generadores",i={unversionedId:"python-generators/overview",id:"python-generators/overview",title:"Yield y los Generadores",description:"\xa1Hola! No! No es el nombre de una banda retro de cumbia-rock. Hoy vamos a hablar sobre el uso de la instrucci\xf3n yield en Python, y de los \xfatiles generadores que podemos crear con ella; los cuales, b\xe1sicamente, son funciones que pueden pausar su ejecuci\xf3n y guardar su estado para continuar en el mismo punto en una llamada posterior.",source:"@site/docs/python-generators/1-overview.md",sourceDirName:"python-generators",slug:"/python-generators/overview",permalink:"/demo/en/docs/python-generators/overview",draft:!1,editUrl:"https://github.com/salvatorius/demo/tree/main/packages/create-docusaurus/templates/shared/docs/python-generators/1-overview.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Generadores",permalink:"/demo/en/docs/category/generadores"},next:{title:"Yield",permalink:"/demo/en/docs/python-generators/yield"}},s={},u=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Repasamos el range",id:"repasamos-el-range",level:3},{value:"De vuelta al Generador",id:"de-vuelta-al-generador",level:3}],c={toc:u},p="wrapper";function d(e){let{components:n,...a}=e;return(0,o.kt)(p,(0,r.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"yield-y-los-generadores"},"Yield y los Generadores"),(0,o.kt)("p",null,"\xa1Hola! No! No es el nombre de una banda retro de cumbia-rock. Hoy vamos a hablar sobre el uso de la instrucci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"yield")," en Python, y de los \xfatiles ",(0,o.kt)("strong",{parentName:"p"},"generadores")," que podemos crear con ella; los cuales, b\xe1sicamente, son funciones que pueden pausar su ejecuci\xf3n y guardar su estado para continuar en el mismo punto en una llamada posterior."),(0,o.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,o.kt)("p",null,"Antes de profundizar en c\xf3mo funciona la instrucci\xf3n yield, es importante entender qu\xe9 son los generadores en Python. Un generador es un ",(0,o.kt)("strong",{parentName:"p"},"objeto iterable"),", obtenido al ejecutar una funci\xf3n generadora inicial (reconocible por contar con una instrucci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"yield"),"), el cual, a su vez, puede ser utilizado para iterar sobre una secuencia de valores (producidos por el c\xf3digo que incluimos en la funci\xf3n original). La principal diferencia entre un generador y una funci\xf3n normal, es que un generador no devuelve todos los valores a la vez, sino que los devuelve de forma incremental, secuencial (uno por uno) a medida que se los vamos solicitando."),(0,o.kt)("p",null,"Definitivamente puede sonar algo confuso al principio, pero podr\xeda ser m\xe1s sencillo si la comparamos con otra funci\xf3n ya conocida, de comportamiento similar en cierto modo (aunque no igual):"),(0,o.kt)("h3",{id:"repasamos-el-range"},"Repasamos el range"),(0,o.kt)("p",null,"Esta instrucci\xf3n de seguro s\xed se nos hace m\xe1s familiar:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"contador = range(10)    # rango de enteros del 0 al 9\n")),(0,o.kt)("p",null,"Este objeto ",(0,o.kt)("inlineCode",{parentName:"p"},"contador")," no contiene directamente la lista de los 10 primeros n\xfameros (que se supone es lo que produce ese ",(0,o.kt)("inlineCode",{parentName:"p"},"range"),").\nEn lugar de eso, en realidad, es un objeto ",(0,o.kt)("strong",{parentName:"p"},"iterable")," de tipo/clase ",(0,o.kt)("inlineCode",{parentName:"p"},"range"),"..."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"> type(contador)\n<class 'range'>\n")),(0,o.kt)("p",null,"...que luego igual tenemos que recorrer para poder ir obteniendo los valores que esperamos:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"for item in contador:\n    print(item+1)\n# imprime:\n# 1\n# 2\n# 3\n# ...\n")),(0,o.kt)("p",null,"Por supuesto, en este ejemplo tan sencillo, lo m\xe1s natural es que decidamos deshacernos de la variable intermedia y quedarnos con algo m\xe1s parecido a esto:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"for item in range(10)\n    print(item)\n")),(0,o.kt)("p",null,"Pero eso (a pesar de que nos evita asignar memoria a esa variable intermedia) igual no cambia el hecho de que, en cualquier caso, ese objeto que obtenemos al hacer ",(0,o.kt)("inlineCode",{parentName:"p"},"range(0, 10)")," no nos retorna en lo inmediato los valores, lo cual es muy posible que lo hayas notado si alguna vez intentaste imprimir esos n\xfameros directamente haciendo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(range(10))\n")),(0,o.kt)("p",null,"en cuyo caso s\xf3lo obtenemos la forma de representaci\xf3n del objeto ",(0,o.kt)("inlineCode",{parentName:"p"},"range")," (tal como lo retorna su m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"__repr__"),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"> print(range(10))\nrange(0, 10)\n")),(0,o.kt)("p",null,"La soluci\xf3n (en ese caso) es iterar ese ",(0,o.kt)("inlineCode",{parentName:"p"},"range")," (o, en el ejemplo anterior, ese objeto que asignamos a la variable ",(0,o.kt)("inlineCode",{parentName:"p"},"contador"),") para obtener todos sus valores. Y eso lo logramos: o bien con el ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," indicado arriba, o bien usando ",(0,o.kt)("em",{parentName:"p"},"list comprehension"),", o simplemente vali\xe9ndonos del constructor de la clase ",(0,o.kt)("inlineCode",{parentName:"p"},"list")," directamente (el cual forzosamente intenta iterar los elementos que recibe para generar la nueva lista):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(list(range(10)))\n")),(0,o.kt)("h3",{id:"de-vuelta-al-generador"},"De vuelta al Generador"),(0,o.kt)("p",null,"Ahora volvamos a mirar hacia el generador, el cual, como dije antes, se comporta de un modo similar al ",(0,o.kt)("inlineCode",{parentName:"p"},"range")," en cuanto a que nuestra funci\xf3n que definimos inicialmente, no retorna directamente el resultado, sino un ojeto iterable que es al cual pediremos los valores (uno a uno)."))}d.isMDXComponent=!0}}]);