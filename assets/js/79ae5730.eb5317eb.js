"use strict";(self.webpackChunkcafenet=self.webpackChunkcafenet||[]).push([[934],{1201:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>g});var r=a(6687);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var s=r.createContext({}),u=function(e){var n=r.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var a=e.components,t=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(a),m=t,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return a?r.createElement(g,i(i({ref:n},c),{},{components:a})):r.createElement(g,i({ref:n},c))}));function g(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:t,i[1]=l;for(var u=2;u<o;u++)i[u]=a[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6392:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=a(8792),t=(a(6687),a(1201));const o={},i="Yield",l={unversionedId:"python-generators/yield",id:"python-generators/yield",title:"Yield",description:"La instrucci\xf3n yield es la que utilizaremos para definir un generador en Python. Cuando el int\xe9rprete de python encuentra la instrucci\xf3n yield dentro de una funci\xf3n, esa funci\xf3n producir\xe1 entonces un generador, que podremos utilizar para iterar sobre esta secuencia de valores de retorno o respuestas (una nueva en cada solicitud que se le haga)",source:"@site/docs/python-generators/2-yield.md",sourceDirName:"python-generators",slug:"/python-generators/yield",permalink:"/demo/docs/python-generators/yield",draft:!1,editUrl:"https://github.com/salvatorius/demo/tree/main/packages/create-docusaurus/templates/shared/docs/python-generators/2-yield.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Yield y los Generadores",permalink:"/demo/docs/python-generators/overview"},next:{title:"Ejemplo: Pares",permalink:"/demo/docs/python-generators/ejemplo-basico"}},s={},u=[{value:"Sintaxis b\xe1sica",id:"sintaxis-b\xe1sica",level:3}],c={toc:u},d="wrapper";function p(e){let{components:n,...a}=e;return(0,t.kt)(d,(0,r.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"yield"},"Yield"),(0,t.kt)("p",null,"La instrucci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"yield")," es la que utilizaremos para definir un generador en Python. Cuando el int\xe9rprete de python encuentra la instrucci\xf3n yield dentro de una funci\xf3n, esa funci\xf3n producir\xe1 entonces un generador, que podremos utilizar para iterar sobre esta secuencia de valores de retorno o respuestas (una nueva en cada solicitud que se le haga)"),(0,t.kt)("h3",{id:"sintaxis-b\xe1sica"},"Sintaxis b\xe1sica"),(0,t.kt)("p",null,"La sintaxis b\xe1sica de la instrucci\xf3n yield es la siguiente:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"def mi_generador():\n    # instrucciones que nos permiten obtener\n    # el nuevo valor en cada nueva iteraci\xf3n\n    yield valor\n")),(0,t.kt)("p",null,"La funci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"mi_generador")," (o el nombre que decidamos darle) es ahora un generador que devuelve el valor especificado en la instrucci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"yield"),". Cuando se llama a la funci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"mi_generador"),", lo que se devuelve no es un objeto con la respuesta directamente (en el ejemplo, no obtenemos ese ",(0,t.kt)("inlineCode",{parentName:"p"},"valor")," que aparentemente retorna el ",(0,t.kt)("inlineCode",{parentName:"p"},"yield"),") Como hemos dicho, se devuelve un objeto ",(0,t.kt)("strong",{parentName:"p"},"generator"),", que se puede utilizar para, a partir de \xe9ste, iterar sobre la secuencia de valores que esper\xe1bamos obtener de esa funci\xf3n."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"gen = mi_generador()\n# \u2191 gen no es el valor que podr\xedamos pensar que retorna la funci\xf3n \"mi_generador\"\n# en realidad lo que obtenemos es un \xabgenerator\xbb\ntype(gen)\n-> <class 'generator'>\n")),(0,t.kt)("p",null,'Ahora, cada vez que se itera sobre el objeto generador, se ejecuta la verdadera funci\xf3n definida por nuestro generador, recorriendo las l\xedneas de nuestro c\xf3digo en forma "normal", hasta que se encuentra la instrucci\xf3n yield, con la cual fijamos en qu\xe9 punto se devuelve el valor especificado, y se detiene la ejecuci\xf3n hasta la siguiente invocaci\xf3n (o iteraci\xf3n) sobre el generador.'),(0,t.kt)("p",null,"Para ello contamos con (entre otras) 2 formas principales de solicitar cada siguiente valor de nuestro generador:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Opci\xf3n A: Iterar directamente sobre el generador:")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"for item in gen:\n    print(item)\n")),(0,t.kt)("p",null,"o (an\xe1logamente) usando ",(0,t.kt)("em",{parentName:"p"},"List Comprehension"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"print ([item for item in gen])\n")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Opci\xf3n B: Solicitar, a discreci\xf3n, el siguiente elemento disponible en la secuencia, cuando se requiera, con la funci\xf3n ",(0,t.kt)("inlineCode",{parentName:"li"},"next"),":")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"gen_io = mi_generador()\nprint ('Primer elemento', next(gen_io))\n# mas c\xf3digo\nprint ('El siguiente elemento en la secuencia es: ', next(gen_io))\n")),(0,t.kt)("p",null,"lo cual tambi\xe9n podr\xedamos hacer dentro de un bucle:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"while (condicion):\n    # garantizamos que en alg\xfan momento\n    # s\xed se cumpla la condici\xf3n de parada\n    # y pedimos el siguiente resultado disponible:\n    print('Siguiente elemento: ', next(gen_io))\n")),(0,t.kt)("p",null,"Es importante destacar que la funci\xf3n generador no se ejecuta completamente cuando se llama, sino que se detiene en donde sea que se consiga la instrucci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"yield"),". Se pausa en ese punto (devolviendo lo que enviemos como argumento del yield) y s\xf3lo se reanuda su ejecuci\xf3n (la instrucci\xf3n o control de flujo que hubiese seguido de no haberse topado con el ",(0,t.kt)("inlineCode",{parentName:"p"},"yield"),") desde ese punto, la siguiente vez que se llama al generador."),(0,t.kt)("p",null,"Eso, entre otras cosas, quiere decir tambi\xe9n que bien podr\xedamos tener m\xe1s c\xf3digo a\xfan despu\xe9s de la instrucci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"yield")," (y \xe9ste se va a ejecutar consecuentemente una vez que se reanude la ejecuci\xf3n tras la siguiente iterci\xf3n o solicitud del ",(0,t.kt)("inlineCode",{parentName:"p"},"next"),") o se reanuda el control de flujo, si es que el yield (por ejemplo) se encontraba en medio de un bucle ",(0,t.kt)("inlineCode",{parentName:"p"},"for"),"."))}p.isMDXComponent=!0}}]);