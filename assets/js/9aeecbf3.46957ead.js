"use strict";(self.webpackChunkcafenet=self.webpackChunkcafenet||[]).push([[197],{1201:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>g});var r=a(6687);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var s=r.createContext({}),d=function(e){var n=r.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},p=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var a=e.components,t=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(a),m=t,g=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return a?r.createElement(g,i(i({ref:n},p),{},{components:a})):r.createElement(g,i({ref:n},p))}));function g(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:t,i[1]=l;for(var d=2;d<o;d++)i[d]=a[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4822:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=a(8792),t=(a(6687),a(1201));const o={},i="Generadores Finitos",l={unversionedId:"python-generators/generador-finito",id:"python-generators/generador-finito",title:"Generadores Finitos",description:"En ese ejemplo anterior, tal como lo definimos, el c\xf3digo que define al generador, se basa en un bucle for de t\xe9rminos finitos:",source:"@site/docs/python-generators/4-generador-finito.md",sourceDirName:"python-generators",slug:"/python-generators/generador-finito",permalink:"/docs/python-generators/generador-finito",draft:!1,editUrl:"https://github.com/salvatorius/demo/tree/main/packages/create-docusaurus/templates/shared/docs/python-generators/4-generador-finito.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Ejemplo: Pares",permalink:"/docs/python-generators/ejemplo-basico"},next:{title:"Generadores Infinitos",permalink:"/docs/python-generators/generador-infinito"}},s={},d=[{value:"&quot;Reiniciar&quot; el generador \xbf?",id:"reiniciar-el-generador-",level:3}],p={toc:d},u="wrapper";function c(e){let{components:n,...a}=e;return(0,t.kt)(u,(0,r.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"generadores-finitos"},"Generadores Finitos"),(0,t.kt)("p",null,"En ese ejemplo anterior, tal como lo definimos, el c\xf3digo que define al generador, se basa en un bucle for de t\xe9rminos finitos:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"def generador_de_pares():\n    for i in range(10):\n        # con i: 0 -> 9\n        yield (i+1)*2\n\npares = generador_de_pares()\n\nfor par in pares:\n    print(f'{par} es par')\n")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"El ",(0,t.kt)("inlineCode",{parentName:"li"},"for")," que definimos empieza con ",(0,t.kt)("inlineCode",{parentName:"li"},"i==0")," y terminar\xe1 con ",(0,t.kt)("inlineCode",{parentName:"li"},"i==9")," (por definici\xf3n de esa funci\xf3n ",(0,t.kt)("inlineCode",{parentName:"li"},"range"),")"),(0,t.kt)("li",{parentName:"ul"},"Visto que el ",(0,t.kt)("inlineCode",{parentName:"li"},"yield")," est\xe1 escrito para devolver ",(0,t.kt)("inlineCode",{parentName:"li"},"(i+1)*2"),", podr\xedamos esperar que los valores entregados sean los enteros pares entre el 2 y el 20 (ambos inclusive)"),(0,t.kt)("li",{parentName:"ul"},"La primera vez que se solicite un valor a ese generador, comenzar\xe1 la ejecuci\xf3n del ",(0,t.kt)("inlineCode",{parentName:"li"},"for"),", entrega el primer valor, pero se detiene en ese punto apenas encuentra la instrucci\xf3n ",(0,t.kt)("inlineCode",{parentName:"li"},"yield")," (justo luego de entregar el valor correspondiente, por supuesto)."),(0,t.kt)("li",{parentName:"ul"},"La siguiente vez que le sea solicitado un nuevo valor (por acci\xf3n directa de la instrucci\xf3n ",(0,t.kt)("inlineCode",{parentName:"li"},"next"),' o como producto de otra iteraci\xf3n actuando sobre el generador), se reanuda el funcionamiento "natural" de ese c\xf3digo. En este caso el yield era la \xfaltima l\xednea en ese bloque ',(0,t.kt)("inlineCode",{parentName:"li"},"for"),", y dado que a\xfan quedan t\xe9rminos por seguir recorriendo el for, se devuelve el control a la siguiente iteraci\xf3n, es decir, avanzamos al ",(0,t.kt)("inlineCode",{parentName:"li"},"i==1"),", y volvemos a caer en el yield (que esta vez entregar\xe1 ",(0,t.kt)("inlineCode",{parentName:"li"},"(i+1)*2"),"=>",(0,t.kt)("inlineCode",{parentName:"li"},"4"),"), se detiene all\xed, y as\xed continuamos."),(0,t.kt)("li",{parentName:"ul"},"Finalmente llegamos al punto en el que se entrega el n\xfamero ",(0,t.kt)("inlineCode",{parentName:"li"},"20")," (d\xe9cimo par en la secuencia). En esa ejecuci\xf3n todo termina como corresponde, pero la siguiente vez que pidamos un valor a ese generador (en caso de intentarlo), en lugar de una respuesta, tendr\xedamos un error, ya que, visto que el c\xf3digo ya no tiene m\xe1s l\xedneas que recorrer (se habr\xeda terminado de ejecutar todo el ciclo del ",(0,t.kt)("inlineCode",{parentName:"li"},"for"),'), entonces se considera al generador como "agotado" y recibimos un error de ',(0,t.kt)("inlineCode",{parentName:"li"},"StopIteration"))),(0,t.kt)("p",null,"Esto lo podr\xedamos probar con un ejemplo a\xfan m\xe1s simple, creando un generador con 3 instrucciones ",(0,t.kt)("inlineCode",{parentName:"p"},"yield")," (s\xed, por supuesto, \xa1podr\xeda haber m\xe1s de un ",(0,t.kt)("inlineCode",{parentName:"p"},"yield"),"! lo cual encontraremos \xfatil m\xe1s adelante) y que estos \xfanicamente devuelvan, espec\xedficamente, 3 simples valores:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'def fases_del_dia():\n    yield "ma\xf1ana"\n    yield "tarde"\n    yield "noche"\n\n = fases_del_dia()\n\n')),(0,t.kt)("p",null,"Como vimos antes, cuando le pidamos un primer valor a ese generador (por ejemplo con ",(0,t.kt)("inlineCode",{parentName:"p"},"next(turno)"),") se inicia la ejecuci\xf3n del c\xf3digo, entrega lo que consigue en esa primera instrucci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"yield"),', y ah\xed se detiene, a la espera de la siguiente llamada, para reanudar su funcionamiento "natural", avanzando a la siguiente instrucci\xf3n (que ser\xeda justamente el siguiente ',(0,t.kt)("inlineCode",{parentName:"p"},"yield"),"), para detenerse nuevamente (y as\xed...) hasta llegar al \xfaltimo ",(0,t.kt)("inlineCode",{parentName:"p"},"yield"),", tras el cual ya no quedan m\xe1s l\xedneas de ejecuci\xf3n \u2014y no hay un bloque de control, como un ",(0,t.kt)("inlineCode",{parentName:"p"},"for")," o un ",(0,t.kt)("inlineCode",{parentName:"p"},"while")," que le pida regresar desde el inicio (o desde alguna otra l\xednea)."),(0,t.kt)("p",null,"La interacci\xf3n final ser\xeda como sigue:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'> next(turno)\nma\xf1ana\n> next(turno)\ntarde\n> next(turno)\nnoche\n> next(turno)\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nStopIteration\n')),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},'\u26a0\ufe0f A recordar: Una vez que un generador se ha "agotado" (y por ende ya no sirve de nada intentar seguirle pidiendo valores) es ',(0,t.kt)("strong",{parentName:"p"},"imposible")," reiniciarlo para que empiece nuevamente la secuencia.")),(0,t.kt)("p",null,'Por supuesto, tambi\xe9n podr\xedamos evitarnos tener que repetir la misma instrucci\xf3n next 3 (o n) veces y, en lugar de estar pidiendo uno a uno estos valores, podemos iterar por los t\xe9rminos que devuelva el generador, y podremos notar, para nuestra tranquilidad, que el iterador "inteligentemente" har\xe1 su trabajo y s\xf3lo nos devolver\xe1 los que consiga, deteniendose oportunamente al conseguirse con el ',(0,t.kt)("inlineCode",{parentName:"p"},"StopIteration"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"nuevo_dia = fases_del_dia()\nfor turno in nuevo_dia:\n    print(turno)\n")),(0,t.kt)("p",null,"imprimir\xe1:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"ma\xf1ana\ntarde\nnoche\n")),(0,t.kt)("p",null,"Cuando el ",(0,t.kt)("inlineCode",{parentName:"p"},"for")," se encuentra con el ",(0,t.kt)("inlineCode",{parentName:"p"},"StopIteration"),', literalmente detiene la iteraci\xf3n y nuestro c\xf3digo completa su ejecuci\xf3n normalmente, sin error.\nEso s\xed, una vez terminada esa iteraci\xf3n, si intent\xe1semos de vuelta pedir alg\xfan valor "extra" a ese mismo iterador (',(0,t.kt)("inlineCode",{parentName:"p"},"nuevo_dia"),")... pues s\xed... como podr\xe1s suponer... de nuevo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'> print(next(nuevo_dia))\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nStopIteration\n')),(0,t.kt)("h3",{id:"reiniciar-el-generador-"},'"Reiniciar" el generador \xbf?'),(0,t.kt)("p",null,'En caso de que necesitemos empezar de nuevo, simplemente tenemos que crear una nueva instancia "limpia" a partir de la funci\xf3n generadora (tal como ocurrir\xeda con un ',(0,t.kt)("inlineCode",{parentName:"p"},"range"),")."),(0,t.kt)("p",null,"Siguiendo la misma secuencia del ejemplo, har\xedamos:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"> otro_dia = fases_del_dia()\n> next(otro_dia)\nma\xf1ana\n")))}c.isMDXComponent=!0}}]);